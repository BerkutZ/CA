<#@ template language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<# var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; #>
// ComputerAlgebra Library

// Copyright Â© Medvedev Igor, Okulovsky Yuri, Borcheninov Jaroslav, Johann Dirry, 2014
// imedvedev3@gmail.com, yuri.okulovsky@gmail.com, yariksuperman@gmail.com, johann.dirry@aon.at

using System;
using AIRLab.CA.Tree.Nodes;

namespace AIRLab.CA.Tree.Rules
{

    public class SelectWhereRule : ISelectWhereRule
    {
        public ISelectRule SelectRule { get; private set; }
        public SelectWhereRule(ISelectRule selectRule)
        {
            SelectRule = selectRule;
        }
    }

<# for(int i = 0; i <= 12; i++) 
{
	var builder = new StringBuilder();

	for(int j = 0; j <= i; j++) 
	{
		builder.Append("T");
		builder.Append(j);
		if(j != i) 
		{
			builder.Append(", ");
		}
	}

	var T = builder.ToString();
#>
    public class SelectWhereRule<<#= T #>> : SelectWhereRule, ISelectWhereRule<<#= T #>>
<#     for(int j = 0; j <= i; j++) { #>
        where T<#= j #> : INode 
<#     } #>
    {
        public Func<ISelectOutput, ITypizedNodeArray<<#= T #>>> Invoke { get; private set; }

        public SelectWhereRule(ISelectRule selectRule, Func<ISelectOutput, ITypizedNodeArray<<#= T #>>> where) : base(selectRule)
        {
            Invoke = where;
        }
    }
<# } #>
}
