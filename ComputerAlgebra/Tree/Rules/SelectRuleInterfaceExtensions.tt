<#@ template language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<# var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; #>
// ComputerAlgebra Library

// Copyright © Medvedev Igor, Okulovsky Yuri, Borcheninov Jaroslav, Johann Dirry, 2014
// imedvedev3@gmail.com, yuri.okulovsky@gmail.com, yariksuperman@gmail.com, johann.dirry@aon.at

using System;
using System.Collections.Generic;
using AIRLab.CA.Tree.Nodes;

namespace AIRLab.CA.Tree.Rules
{
    public static class SelectRuleInterfaceExtensions
    {
<# for(int i = 0; i <= 12; i++) 
{
	var builder = new StringBuilder();

	for(int j = 0; j <= i; j++) 
	{
		builder.Append("T");
		builder.Append(j);
		if(j != i) 
		{
			builder.Append(", ");
		}
	}

	var T = builder.ToString();
#>

        public static ISelectWhereRule<<#= T #>> Where<<#= T #>>(this ISelectRule rule)
<#     for(int j = 0; j <= i; j++) { #>
            where T<#= j #> : INode 
<#     } #>
        {
            return rule.Where<<#= T #>>(z => true);
        }

        public static ISelectWhereRule<<#= T #>> Where<<#= T #>>(this ISelectRule rule, Func<ITypizedNodeArray<<#= T #>>, bool> where)
<#     for(int j = 0; j <= i; j++) { #>
            where T<#= j #> : INode 
<#     } #>
        {
            return new SelectWhereRule<<#= T #>>(rule, selector =>
            {
                var tna = Typize<<#= T #>>(selector.SelectedNodes);
                if (tna == null)
                {
                    return null;
                }
                tna.SelectResult = selector;
                return where(tna) ? tna : null;
            });
        }

        private static ITypizedNodeArray<<#= T #>> Typize<<#= T #>>(IList<INode> array)
<#     for(int j = 0; j <= i; j++) { #>
            where T<#= j #> : INode 
<#     } #>
        {
            if (array == null)
            {
                return null;
            }
            var typizedNodeArray = new TypizedNodeArray<<#= T #>>();

<#     for(int j = 0; j <= i; j++) { #>
            if (!(array[<#= j #>] is T<#= j #>))
            {
                return null;
            }
            typizedNodeArray.<#= letters[j] #> = (T<#= j #>)array[<#= j #>];

<#     } #>
            return typizedNodeArray;
        }
<# } #>
    }
}