<#@ template language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<# var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; #>
// ComputerAlgebra Library

// Copyright Â© Medvedev Igor, Okulovsky Yuri, Borcheninov Jaroslav, Johann Dirry, 2014
// imedvedev3@gmail.com, yuri.okulovsky@gmail.com, yariksuperman@gmail.com, johann.dirry@aon.at

using System.Collections.Generic;
using AIRLab.CA.Tree.Nodes;

namespace AIRLab.CA.Tree.Rules
{
<# for(int i = 0; i <= 12; i++) 
{
	var builder = new StringBuilder();

	for(int j = 0; j <= i; j++) 
	{
		builder.Append("T");
		builder.Append(j);
		if(j != i) 
		{
			builder.Append(", ");
		}
	}

	var T = builder.ToString();
#>
    public class TypizedNodeArray<<#= T #>> : WhereOutput, ITypizedNodeArray<<#= T #>>
<#     for(int j = 0; j <= i; j++) { #>
        where T<#= j #> : INode 
<#     } #>
    {
<#     for(int j = 0; j <= i; j++) { #>
        public T<#= j #> <#= letters[j] #> { get; set; } 
<#     } #>

        override protected IModInput MakeSafeRuleInstance(IList<INode> c)
        {
            return new TypizedDecorArray<<#= T #>>(c);
        }
    }

<# } #>
}